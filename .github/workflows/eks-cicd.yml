name: eks-cicd.yml

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    if: "!contains(github.event.head_commit.message, '[skip cicd]')"
    runs-on: ubuntu-latest
    steps:

      # Step 1: 내 깃허브 소스 코드 가져오기
      - name: checkout github
        uses: actions/checkout@v2

      # Step 2: kubectl 설치
      - name: install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.25.9"
        id: install

      # Step 3: AWS CLI 설치 및 configure 설정
      - name: configure aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY }}
          aws-secret-access-key:  ${{ secrets.AWS_SECRET }}
          aws-region: ap-northeast-2

      # Step 4: AWS EKS 클러스터 세팅
      - name: update cluster infomation
        run: aws eks update-kubeconfig --name khi-cluster --region ap-northeast-2

      # Step 5: AWS ECR 로그인
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 6-1-1: apigateway-service 빌드 및 푸시
      - name: gateway build and push docker image to ecr
        env:
          REGISTRY: 246233007938.dkr.ecr.ap-northeast-2.amazonaws.com
          REPOSITORY: apigateway-service
          IMAGE_TAG: latest
        run: |
          docker build \
          -t $REGISTRY/$REPOSITORY:$IMAGE_TAG \
          -f ./Dockerfile ./apigateway-service
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Step 6-1-2: apigateway-service deployment apply
      - name: eks kubectl apply
        run: |
          kubectl apply -f ./apigateway-service/k8s/depl-svc.yml
          kubectl rollout restart deployment apigateway-service-depl -n khi

      # Step 6-2-1: security-service 빌드 및 푸시
      - name: member build and push docker image to ecr
        env:
          REGISTRY: 246233007938.dkr.ecr.ap-northeast-2.amazonaws.com
          REPOSITORY: security-service
          IMAGE_TAG: latest
        run: |
          docker build \
          -t $REGISTRY/$REPOSITORY:$IMAGE_TAG \
          -f ./Dockerfile ./security-service
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Step 6-2-2: security-service deployment apply
      - name: eks kubectl apply
        run: |
          kubectl apply -f ./security-service/k8s/depl-svc.yml
          kubectl rollout restart deployment security-service-depl -n khi

      # Step 6-3-1: onboarding-service 빌드 및 푸시
      - name: member build and push docker image to ecr
        env:
          REGISTRY: 246233007938.dkr.ecr.ap-northeast-2.amazonaws.com
          REPOSITORY: onboarding-service
          IMAGE_TAG: latest
        run: |
          docker build \
          -t $REGISTRY/$REPOSITORY:$IMAGE_TAG \
          -f ./Dockerfile ./onboarding
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Step 6-3-2: onboarding-service deployment apply
      - name: eks kubectl apply
        run: |
          kubectl apply -f ./onboarding-service/k8s/depl-svc.yml
          kubectl rollout restart deployment onboarding-service-depl -n khi

      # Step 6-4-1: totp-service 빌드 및 푸시
      - name: member build and push docker image to ecr
        env:
          REGISTRY: 246233007938.dkr.ecr.ap-northeast-2.amazonaws.com
          REPOSITORY: totp-service
          IMAGE_TAG: latest
        run: |
          docker build \
          -t $REGISTRY/$REPOSITORY:$IMAGE_TAG \
          -f ./Dockerfile ./totp
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Step 6-4-2: totp-service deployment apply
      - name: eks kubectl apply
        run: |
          kubectl apply -f ./totp-service/k8s/depl-svc.yml
          kubectl rollout restart deployment totp-service-depl -n khi